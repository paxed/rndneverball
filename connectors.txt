# lines beginning with '#' are comments.

# directory where prefabs are
MAPDIR=./prefabs/

# name of the DEFINE where we start the generation from
START=intermission1

# a comma-separated list of DEFINE names where we end the generation.
# picks one from the list at random when level is long enough.
FINISH=goal

# When a prefab placement is blocked, use this to "cap" it off.
# It should fit inside the smallest prefab size, with some room to spare.
DEFCAP=goal_cap

#
#DEFINE=name_of_the_piece {
#   size:(x1,y1,z1)-(x2,y2,z2)
#        # the bounding box of the prefab. optional.
#        # if left out, the prefab does not block other prefab generation in it's place.
#   prefab: filename.map
#        # the prefab filename. repeatable. MAPDIR is prefixed to this. allows globbing.
#   next: name_of_another_piece
#        # name of DEFINE to go to next. optional. repeatable.
#        # next one if picked at random. if left out, generation stops there.
#   exit: (x,y,z)
#        # optional. repeatable. Defines how much to shift current coordinates
#        # before going to next piece.
#        # picks next piece to generate for each exit defined.
#        # if left out, coordinates are not shifted before going to the next piece.
#        # accepts an optional r=+X parameter, which is the rotation in 90 degrees.
#        # r=+1 would turn 90 degrees to right. r=+3 would turn 90 degrees to left.
#   cap: name_of_end_piece
#        # optional. used to cap off the generation, if this prefab generation is blocked.
#        # if not defined, uses DEFCAP
#   cost: integer_value
#        # optional. host costly this is? defaults to 1.
#}
#


DEFINE=intermission1 {
	      prefab: intermission_t1.map
	      next: intermission2
	      cost: 0
}


DEFINE=intermission2 {
	      prefab: intermission_t2.map
	      next: start1
	      cost: 0
}

DEFINE=start1 {
	      size: (-64,-64,-64)-(192,128,192)
	      prefab: start1.map
	      exit: (0, 128, 0)
	      next: road_a
	      next: road_b
	      next: turn_right
	      next: turn_left
	      next: ramp_up
	      next: ramp_down
}

# one green turf "diamond" size
DEFINE=road_a {
	      size: (-64,0,-64)-(192,128,192)
	      prefab: road_a*.map
	      exit: (0, 128, 0)
	      next: road_a
	      next: road_b
	      next: turn_right
	      next: turn_left
	      next: ramp_up
	      next: ramp_down
}

DEFINE=turn_right {
	      size: (-64,0,-64) - (256,320,192)
	      prefab: turn_right_*.map
	      exit: (256,256,0), r=+1
	      next: road_a
	      next: road_a
	      next: road_b
	      next: turn_right
	      next: turn_left
	      next: ramp_up
	      next: ramp_down
}

DEFINE=turn_left {
	      size: (-128,0,-64) - (192,320,192)
	      prefab: turn_left_*.map
	      exit: (-128,128,0), r=+3
	      next: road_a
	      next: road_a
	      next: road_b
	      next: turn_right
	      next: turn_left
	      next: ramp_up
	      next: ramp_down
}

DEFINE=ramp_up {
	      size:(-64,0,-64)-(192,256,192)
	      prefab: ramp_up_*.map
	      exit: (0, 256, 64)
	      next: road_a
	      next: road_a
	      next: road_b
	      next: turn_right
	      next: turn_left
}

DEFINE=ramp_down {
	      size:(-64,0,-128)-(192,256,128)
	      prefab: ramp_down_*.map
	      exit: (0, 256, -64)
	      next: road_a
	      next: road_a
	      next: road_b
	      next: turn_right
	      next: turn_left
}

# twice as long as road_a
DEFINE=road_b {
	      size: (-64,0,-64)-(192,256,192)
	      prefab: road_b*.map
	      exit: (0, 256, 0)
	      next: road_a
	      next: road_a
	      next: road_b
	      next: turn_right
	      next: turn_left
	      next: ramp_up
	      next: ramp_down
}

DEFINE=goal_cap {
	      size: (-64,0,-64)-(192,128,192)
	      prefab: goal.map
# no next stanzas defined, this ends the generation.
}


DEFINE=goal {
	      size: (-192,0,-64)-(320,576,192)
	      prefab: goal*.map
# no next stanzas defined, this ends the generation.
}
